{
    "sourceFile": "Website/Control.FullScreen.css",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1640262735874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1640262755311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,345 +1,10 @@\n-/*!\r\n-* Based on package 'screenfull'\r\n-* v5.2.0 - 2021-11-03\r\n-* (c) Sindre Sorhus; MIT License\r\n-* Added definition for using screenfull as an amd module\r\n-* Must be placed before the definition of leaflet.fullscreen\r\n-* as it is required by that\r\n-*/\r\n-(function (root, factory) {\r\n-\tif (typeof define === 'function' && define.amd) {\r\n-\t\tdefine('screenfull', factory);\r\n-  } else if (typeof module === 'object' && module.exports) {\r\n-\t\tmodule.exports.screenfull = factory();\r\n-  } else {\r\n-\t\t// Save 'screenfull' into global window variable\r\n-\t\troot.screenfull = factory();\r\n-\t}\r\n-}(this, function () {\r\n-\t'use strict';\r\n-\r\n-\tvar document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\r\n-\r\n-\tvar fn = (function () {\r\n-\t\tvar val;\r\n-\r\n-\t\tvar fnMap = [\r\n-\t\t\t[\r\n-\t\t\t\t'requestFullscreen',\r\n-\t\t\t\t'exitFullscreen',\r\n-\t\t\t\t'fullscreenElement',\r\n-\t\t\t\t'fullscreenEnabled',\r\n-\t\t\t\t'fullscreenchange',\r\n-\t\t\t\t'fullscreenerror'\r\n-\t\t\t],\r\n-\t\t\t// New WebKit\r\n-\t\t\t[\r\n-\t\t\t\t'webkitRequestFullscreen',\r\n-\t\t\t\t'webkitExitFullscreen',\r\n-\t\t\t\t'webkitFullscreenElement',\r\n-\t\t\t\t'webkitFullscreenEnabled',\r\n-\t\t\t\t'webkitfullscreenchange',\r\n-\t\t\t\t'webkitfullscreenerror'\r\n-\r\n-\t\t\t],\r\n-\t\t\t// Old WebKit\r\n-\t\t\t[\r\n-\t\t\t\t'webkitRequestFullScreen',\r\n-\t\t\t\t'webkitCancelFullScreen',\r\n-\t\t\t\t'webkitCurrentFullScreenElement',\r\n-\t\t\t\t'webkitCancelFullScreen',\r\n-\t\t\t\t'webkitfullscreenchange',\r\n-\t\t\t\t'webkitfullscreenerror'\r\n-\r\n-\t\t\t],\r\n-\t\t\t[\r\n-\t\t\t\t'mozRequestFullScreen',\r\n-\t\t\t\t'mozCancelFullScreen',\r\n-\t\t\t\t'mozFullScreenElement',\r\n-\t\t\t\t'mozFullScreenEnabled',\r\n-\t\t\t\t'mozfullscreenchange',\r\n-\t\t\t\t'mozfullscreenerror'\r\n-\t\t\t],\r\n-\t\t\t[\r\n-\t\t\t\t'msRequestFullscreen',\r\n-\t\t\t\t'msExitFullscreen',\r\n-\t\t\t\t'msFullscreenElement',\r\n-\t\t\t\t'msFullscreenEnabled',\r\n-\t\t\t\t'MSFullscreenChange',\r\n-\t\t\t\t'MSFullscreenError'\r\n-\t\t\t]\r\n-\t\t];\r\n-\r\n-\t\tvar i = 0;\r\n-\t\tvar l = fnMap.length;\r\n-\t\tvar ret = {};\r\n-\r\n-\t\tfor (; i < l; i++) {\r\n-\t\t\tval = fnMap[i];\r\n-\t\t\tif (val && val[1] in document) {\r\n-\t\t\t\tfor (i = 0; i < val.length; i++) {\r\n-\t\t\t\t\tret[fnMap[0][i]] = val[i];\r\n-\t\t\t\t}\r\n-\t\t\t\treturn ret;\r\n-\t\t\t}\r\n-\t\t}\r\n-\r\n-\t\treturn false;\r\n-\t})();\r\n-\r\n-\tvar eventNameMap = {\r\n-\t\tchange: fn.fullscreenchange,\r\n-\t\terror: fn.fullscreenerror\r\n-\t};\r\n-\r\n-\tvar screenfull = {\r\n-\t\trequest: function (element, options) {\r\n-\t\t\treturn new Promise(function (resolve, reject) {\r\n-\t\t\t\tvar onFullScreenEntered = function () {\r\n-\t\t\t\t\tthis.off('change', onFullScreenEntered);\r\n-\t\t\t\t\tresolve();\r\n-\t\t\t\t}.bind(this);\r\n-\r\n-\t\t\t\tthis.on('change', onFullScreenEntered);\r\n-\r\n-\t\t\t\telement = element || document.documentElement;\r\n-\r\n-\t\t\t\tvar returnPromise = element[fn.requestFullscreen](options);\r\n-\r\n-\t\t\t\tif (returnPromise instanceof Promise) {\r\n-\t\t\t\t\treturnPromise.then(onFullScreenEntered).catch(reject);\r\n-\t\t\t\t}\r\n-\t\t\t}.bind(this));\r\n-\t\t},\r\n-\t\texit: function () {\r\n-\t\t\treturn new Promise(function (resolve, reject) {\r\n-\t\t\t\tif (!this.isFullscreen) {\r\n-\t\t\t\t\tresolve();\r\n-\t\t\t\t\treturn;\r\n-\t\t\t\t}\r\n-\r\n-\t\t\t\tvar onFullScreenExit = function () {\r\n-\t\t\t\t\tthis.off('change', onFullScreenExit);\r\n-\t\t\t\t\tresolve();\r\n-\t\t\t\t}.bind(this);\r\n-\r\n-\t\t\t\tthis.on('change', onFullScreenExit);\r\n-\r\n-\t\t\t\tvar returnPromise = document[fn.exitFullscreen]();\r\n-\r\n-\t\t\t\tif (returnPromise instanceof Promise) {\r\n-\t\t\t\t\treturnPromise.then(onFullScreenExit).catch(reject);\r\n-\t\t\t\t}\r\n-\t\t\t}.bind(this));\r\n-\t\t},\r\n-\t\ttoggle: function (element, options) {\r\n-\t\t\treturn this.isFullscreen ? this.exit() : this.request(element, options);\r\n-\t\t},\r\n-\t\tonchange: function (callback) {\r\n-\t\t\tthis.on('change', callback);\r\n-\t\t},\r\n-\t\tonerror: function (callback) {\r\n-\t\t\tthis.on('error', callback);\r\n-\t\t},\r\n-\t\ton: function (event, callback) {\r\n-\t\t\tvar eventName = eventNameMap[event];\r\n-\t\t\tif (eventName) {\r\n-\t\t\t\tdocument.addEventListener(eventName, callback, false);\r\n-\t\t\t}\r\n-\t\t},\r\n-\t\toff: function (event, callback) {\r\n-\t\t\tvar eventName = eventNameMap[event];\r\n-\t\t\tif (eventName) {\r\n-\t\t\t\tdocument.removeEventListener(eventName, callback, false);\r\n-\t\t\t}\r\n-\t\t},\r\n-\t\traw: fn\r\n-\t};\r\n-\r\n-\tif (!fn) {\r\n-\t\treturn {isEnabled: false};\r\n-\t} else {\r\n-\t\tObject.defineProperties(screenfull, {\r\n-\t\t\tisFullscreen: {\r\n-\t\t\t\tget: function () {\r\n-\t\t\t\t\treturn Boolean(document[fn.fullscreenElement]);\r\n-\t\t\t\t}\r\n-\t\t\t},\r\n-\t\t\telement: {\r\n-\t\t\t\tenumerable: true,\r\n-\t\t\t\tget: function () {\r\n-\t\t\t\t\treturn document[fn.fullscreenElement];\r\n-\t\t\t\t}\r\n-\t\t\t},\r\n-\t\t\tisEnabled: {\r\n-\t\t\t\tenumerable: true,\r\n-\t\t\t\tget: function () {\r\n-\t\t\t\t\t// Coerce to boolean in case of old WebKit\r\n-\t\t\t\t\treturn Boolean(document[fn.fullscreenEnabled]);\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t});\r\n-\t\treturn screenfull;\r\n-\t}\r\n-}));\r\n-\r\n-/*!\r\n-* leaflet.fullscreen\r\n-*/\r\n-(function (root, factory) {\r\n-  if (typeof define === 'function' && define.amd) {\r\n-\t\t// define an AMD module that requires 'leaflet' and 'screenfull'\r\n-\t\t// and resolve to an object containing leaflet and screenfull\r\n-\t\tdefine('leafletFullScreen', ['leaflet', 'screenfull'], factory);\r\n-  } else if (typeof module === 'object' && module.exports) {\r\n-\t\t// define a CommonJS module that requires 'leaflet' and 'screenfull'\r\n-\t\tmodule.exports = factory(require('leaflet'), require('screenfull'));\r\n-  } else {\r\n-\t\t// Assume 'leaflet' and 'screenfull' are loaded into global variable already\r\n-\t\tfactory(root.L, root.screenfull);\r\n-\t}\r\n-}(this, function (leaflet, screenfull) {\r\n-\t'use strict';\r\n-\r\n-\tleaflet.Control.FullScreen = leaflet.Control.extend({\r\n-\t\toptions: {\r\n-\t\t\tposition: 'topleft',\r\n-\t\t\ttitle: 'Full Screen',\r\n-\t\t\ttitleCancel: 'Exit Full Screen',\r\n-\t\t\tforceSeparateButton: false,\r\n-\t\t\tforcePseudoFullscreen: false,\r\n-\t\t\tfullscreenElement: false\r\n-\t\t},\r\n-\r\n-\t\t_screenfull: screenfull,\r\n-\r\n-\t\tonAdd: function (map) {\r\n-\t\t\tvar className = 'leaflet-control-zoom-fullscreen', container, content = '';\r\n-\r\n-\t\t\tif (map.zoomControl && !this.options.forceSeparateButton) {\r\n-\t\t\t\tcontainer = map.zoomControl._container;\r\n-\t\t\t} else {\r\n-\t\t\t\tcontainer = leaflet.DomUtil.create('div', 'leaflet-bar');\r\n-\t\t\t}\r\n-\r\n-\t\t\tif (this.options.content) {\r\n-\t\t\t\tcontent = this.options.content;\r\n-\t\t\t} else {\r\n-\t\t\t\tclassName += ' fullscreen-icon';\r\n-\t\t\t}\r\n-\r\n-\t\t\tthis._createButton(this.options.title, className, content, container, this.toggleFullScreen, this);\r\n-\t\t\tthis._map.fullscreenControl = this;\r\n-\r\n-\t\t\tthis._map.on('enterFullscreen exitFullscreen', this._toggleState, this);\r\n-\r\n-\t\t\treturn container;\r\n-\t\t},\r\n-\r\n-\t\tonRemove: function () {\r\n-\t\t\tleaflet.DomEvent\r\n-\t\t\t\t.off(this.link, 'click', leaflet.DomEvent.stopPropagation)\r\n-\t\t\t\t.off(this.link, 'click', leaflet.DomEvent.preventDefault)\r\n-\t\t\t\t.off(this.link, 'click', this.toggleFullScreen, this);\r\n-\r\n-\t\t\tleaflet.DomEvent\r\n-\t\t\t\t.off(this._container, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.stopPropagation)\r\n-\t\t\t\t.off(this._container, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.preventDefault)\r\n-\t\t\t\t.off(this._container, this._screenfull.raw.fullscreenchange, this._handleFullscreenChange, this);\r\n-\r\n-\t\t\tleaflet.DomEvent\r\n-\t\t\t\t.off(document, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.stopPropagation)\r\n-\t\t\t\t.off(document, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.preventDefault)\r\n-\t\t\t\t.off(document, this._screenfull.raw.fullscreenchange, this._handleFullscreenChange, this);\r\n-\t\t},\r\n-\r\n-\t\t_createButton: function (title, className, content, container, fn, context) {\r\n-\t\t\tthis.link = leaflet.DomUtil.create('a', className, container);\r\n-\t\t\tthis.link.href = '#';\r\n-\t\t\tthis.link.title = title;\r\n-\t\t\tthis.link.innerHTML = content;\r\n-\r\n-\t\t\tthis.link.setAttribute('role', 'button');\r\n-\t\t\tthis.link.setAttribute('aria-label', title);\r\n-\r\n-\t\t\tleaflet.DomEvent\r\n-\t\t\t\t.on(this.link, 'click', leaflet.DomEvent.stopPropagation)\r\n-\t\t\t\t.on(this.link, 'click', leaflet.DomEvent.preventDefault)\r\n-\t\t\t\t.on(this.link, 'click', fn, context);\r\n-\r\n-\t\t\tleaflet.DomEvent\r\n-\t\t\t\t.on(container, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.stopPropagation)\r\n-\t\t\t\t.on(container, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.preventDefault)\r\n-\t\t\t\t.on(container, this._screenfull.raw.fullscreenchange, this._handleFullscreenChange, context);\r\n-\r\n-\t\t\tleaflet.DomEvent\r\n-\t\t\t\t.on(document, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.stopPropagation)\r\n-\t\t\t\t.on(document, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.preventDefault)\r\n-\t\t\t\t.on(document, this._screenfull.raw.fullscreenchange, this._handleFullscreenChange, context);\r\n-\r\n-\t\t\treturn this.link;\r\n-\t\t},\r\n-\r\n-\t\ttoggleFullScreen: function () {\r\n-\t\t\tvar map = this._map;\r\n-\t\t\tmap._exitFired = false;\r\n-\t\t\tif (map._isFullscreen) {\r\n-\t\t\t\tif (this._screenfull.isEnabled && !this.options.forcePseudoFullscreen) {\r\n-\t\t\t\t\tthis._screenfull.exit();\r\n-\t\t\t\t} else {\r\n-\t\t\t\t\tleaflet.DomUtil.removeClass(this.options.fullscreenElement ? this.options.fullscreenElement : map._container, 'leaflet-pseudo-fullscreen');\r\n-\t\t\t\t\tmap.invalidateSize();\r\n-\t\t\t\t}\r\n-\t\t\t\tmap.fire('exitFullscreen');\r\n-\t\t\t\tmap._exitFired = true;\r\n-\t\t\t\tmap._isFullscreen = false;\r\n-\t\t\t}\r\n-\t\t\telse {\r\n-\t\t\t\tif (this._screenfull.isEnabled && !this.options.forcePseudoFullscreen) {\r\n-\t\t\t\t\tthis._screenfull.request(this.options.fullscreenElement ? this.options.fullscreenElement : map._container);\r\n-\t\t\t\t} else {\r\n-\t\t\t\t\tleaflet.DomUtil.addClass(this.options.fullscreenElement ? this.options.fullscreenElement : map._container, 'leaflet-pseudo-fullscreen');\r\n-\t\t\t\t\tmap.invalidateSize();\r\n-\t\t\t\t}\r\n-\t\t\t\tmap.fire('enterFullscreen');\r\n-\t\t\t\tmap._isFullscreen = true;\r\n-\t\t\t}\r\n-\t\t},\r\n-\r\n-\t\t_toggleState: function () {\r\n-\t\t\tthis.link.title = this._map._isFullscreen ? this.options.title : this.options.titleCancel;\r\n-\t\t\tthis._map._isFullscreen ? L.DomUtil.removeClass(this.link, 'leaflet-fullscreen-on') : L.DomUtil.addClass(this.link, 'leaflet-fullscreen-on');\r\n-\t\t},\r\n-\r\n-\t\t_handleFullscreenChange: function () {\r\n-\t\t\tvar map = this._map;\r\n-\t\t\tmap.invalidateSize();\r\n-\t\t\tif (!this._screenfull.isFullscreen && !map._exitFired) {\r\n-\t\t\t\tmap.fire('exitFullscreen');\r\n-\t\t\t\tmap._exitFired = true;\r\n-\t\t\t\tmap._isFullscreen = false;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t});\r\n-\r\n-\tleaflet.Map.include({\r\n-\t\ttoggleFullscreen: function () {\r\n-\t\t\tthis.fullscreenControl.toggleFullScreen();\r\n-\t\t}\r\n-\t});\r\n-\r\n-\tleaflet.Map.addInitHook(function () {\r\n-\t\tif (this.options.fullscreenControl) {\r\n-\t\t\tthis.addControl(leaflet.control.fullscreen(this.options.fullscreenControlOptions));\r\n-\t\t}\r\n-\t});\r\n-\r\n-\tleaflet.control.fullscreen = function (options) {\r\n-\t\treturn new leaflet.Control.FullScreen(options);\r\n-\t};\r\n-\r\n-\t// must return an object containing also screenfull to make screenfull\r\n-\t// available outside of this package, if used as an amd module,\r\n-\t// as webpack cannot handle amd define with moduleid\r\n-\treturn {leaflet: leaflet, screenfull: screenfull};\r\n-}));\n\\ No newline at end of file\n+.fullscreen-icon { background-image: url(icon-fullscreen.svg); background-size:26px 52px; }\r\n+.fullscreen-icon.leaflet-fullscreen-on { background-position:0 -26px; }\r\n+.leaflet-touch .fullscreen-icon { background-position: 2px 2px; }\r\n+.leaflet-touch .fullscreen-icon.leaflet-fullscreen-on { background-position: 2px -24px; }\r\n+/* one selector per rule as explained here : http://www.sitepoint.com/html5-full-screen-api/ */\r\n+.leaflet-container:-webkit-full-screen { width: 100% !important; height: 100% !important; z-index: 99999; }\r\n+.leaflet-container:-ms-fullscreen { width: 100% !important; height: 100% !important; z-index: 99999; }\r\n+.leaflet-container:full-screen { width: 100% !important; height: 100% !important; z-index: 99999; }\r\n+.leaflet-container:fullscreen { width: 100% !important; height: 100% !important; z-index: 99999; }\r\n+.leaflet-pseudo-fullscreen { position: fixed !important; width: 100% !important; height: 100% !important; top: 0px !important; left: 0px !important; z-index: 99999; }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1640262779985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,5 +6,14 @@\n .leaflet-container:-webkit-full-screen { width: 100% !important; height: 100% !important; z-index: 99999; }\r\n .leaflet-container:-ms-fullscreen { width: 100% !important; height: 100% !important; z-index: 99999; }\r\n .leaflet-container:full-screen { width: 100% !important; height: 100% !important; z-index: 99999; }\r\n .leaflet-container:fullscreen { width: 100% !important; height: 100% !important; z-index: 99999; }\r\n+.fullscreen-icon { background-image: url(icon-fullscreen.svg); background-size:26px 52px; }\r\n+.fullscreen-icon.leaflet-fullscreen-on { background-position:0 -26px; }\r\n+.leaflet-touch .fullscreen-icon { background-position: 2px 2px; }\r\n+.leaflet-touch .fullscreen-icon.leaflet-fullscreen-on { background-position: 2px -24px; }\r\n+/* one selector per rule as explained here : http://www.sitepoint.com/html5-full-screen-api/ */\r\n+.leaflet-container:-webkit-full-screen { width: 100% !important; height: 100% !important; z-index: 99999; }\r\n+.leaflet-container:-ms-fullscreen { width: 100% !important; height: 100% !important; z-index: 99999; }\r\n+.leaflet-container:full-screen { width: 100% !important; height: 100% !important; z-index: 99999; }\r\n+.leaflet-container:fullscreen { width: 100% !important; height: 100% !important; z-index: 99999; }\r\n .leaflet-pseudo-fullscreen { position: fixed !important; width: 100% !important; height: 100% !important; top: 0px !important; left: 0px !important; z-index: 99999; }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1640262735874,
            "name": "Commit-0",
            "content": "/*!\r\n* Based on package 'screenfull'\r\n* v5.2.0 - 2021-11-03\r\n* (c) Sindre Sorhus; MIT License\r\n* Added definition for using screenfull as an amd module\r\n* Must be placed before the definition of leaflet.fullscreen\r\n* as it is required by that\r\n*/\r\n(function (root, factory) {\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine('screenfull', factory);\r\n  } else if (typeof module === 'object' && module.exports) {\r\n\t\tmodule.exports.screenfull = factory();\r\n  } else {\r\n\t\t// Save 'screenfull' into global window variable\r\n\t\troot.screenfull = factory();\r\n\t}\r\n}(this, function () {\r\n\t'use strict';\r\n\r\n\tvar document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\r\n\r\n\tvar fn = (function () {\r\n\t\tvar val;\r\n\r\n\t\tvar fnMap = [\r\n\t\t\t[\r\n\t\t\t\t'requestFullscreen',\r\n\t\t\t\t'exitFullscreen',\r\n\t\t\t\t'fullscreenElement',\r\n\t\t\t\t'fullscreenEnabled',\r\n\t\t\t\t'fullscreenchange',\r\n\t\t\t\t'fullscreenerror'\r\n\t\t\t],\r\n\t\t\t// New WebKit\r\n\t\t\t[\r\n\t\t\t\t'webkitRequestFullscreen',\r\n\t\t\t\t'webkitExitFullscreen',\r\n\t\t\t\t'webkitFullscreenElement',\r\n\t\t\t\t'webkitFullscreenEnabled',\r\n\t\t\t\t'webkitfullscreenchange',\r\n\t\t\t\t'webkitfullscreenerror'\r\n\r\n\t\t\t],\r\n\t\t\t// Old WebKit\r\n\t\t\t[\r\n\t\t\t\t'webkitRequestFullScreen',\r\n\t\t\t\t'webkitCancelFullScreen',\r\n\t\t\t\t'webkitCurrentFullScreenElement',\r\n\t\t\t\t'webkitCancelFullScreen',\r\n\t\t\t\t'webkitfullscreenchange',\r\n\t\t\t\t'webkitfullscreenerror'\r\n\r\n\t\t\t],\r\n\t\t\t[\r\n\t\t\t\t'mozRequestFullScreen',\r\n\t\t\t\t'mozCancelFullScreen',\r\n\t\t\t\t'mozFullScreenElement',\r\n\t\t\t\t'mozFullScreenEnabled',\r\n\t\t\t\t'mozfullscreenchange',\r\n\t\t\t\t'mozfullscreenerror'\r\n\t\t\t],\r\n\t\t\t[\r\n\t\t\t\t'msRequestFullscreen',\r\n\t\t\t\t'msExitFullscreen',\r\n\t\t\t\t'msFullscreenElement',\r\n\t\t\t\t'msFullscreenEnabled',\r\n\t\t\t\t'MSFullscreenChange',\r\n\t\t\t\t'MSFullscreenError'\r\n\t\t\t]\r\n\t\t];\r\n\r\n\t\tvar i = 0;\r\n\t\tvar l = fnMap.length;\r\n\t\tvar ret = {};\r\n\r\n\t\tfor (; i < l; i++) {\r\n\t\t\tval = fnMap[i];\r\n\t\t\tif (val && val[1] in document) {\r\n\t\t\t\tfor (i = 0; i < val.length; i++) {\r\n\t\t\t\t\tret[fnMap[0][i]] = val[i];\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t})();\r\n\r\n\tvar eventNameMap = {\r\n\t\tchange: fn.fullscreenchange,\r\n\t\terror: fn.fullscreenerror\r\n\t};\r\n\r\n\tvar screenfull = {\r\n\t\trequest: function (element, options) {\r\n\t\t\treturn new Promise(function (resolve, reject) {\r\n\t\t\t\tvar onFullScreenEntered = function () {\r\n\t\t\t\t\tthis.off('change', onFullScreenEntered);\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t}.bind(this);\r\n\r\n\t\t\t\tthis.on('change', onFullScreenEntered);\r\n\r\n\t\t\t\telement = element || document.documentElement;\r\n\r\n\t\t\t\tvar returnPromise = element[fn.requestFullscreen](options);\r\n\r\n\t\t\t\tif (returnPromise instanceof Promise) {\r\n\t\t\t\t\treturnPromise.then(onFullScreenEntered).catch(reject);\r\n\t\t\t\t}\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\t\texit: function () {\r\n\t\t\treturn new Promise(function (resolve, reject) {\r\n\t\t\t\tif (!this.isFullscreen) {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar onFullScreenExit = function () {\r\n\t\t\t\t\tthis.off('change', onFullScreenExit);\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t}.bind(this);\r\n\r\n\t\t\t\tthis.on('change', onFullScreenExit);\r\n\r\n\t\t\t\tvar returnPromise = document[fn.exitFullscreen]();\r\n\r\n\t\t\t\tif (returnPromise instanceof Promise) {\r\n\t\t\t\t\treturnPromise.then(onFullScreenExit).catch(reject);\r\n\t\t\t\t}\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\t\ttoggle: function (element, options) {\r\n\t\t\treturn this.isFullscreen ? this.exit() : this.request(element, options);\r\n\t\t},\r\n\t\tonchange: function (callback) {\r\n\t\t\tthis.on('change', callback);\r\n\t\t},\r\n\t\tonerror: function (callback) {\r\n\t\t\tthis.on('error', callback);\r\n\t\t},\r\n\t\ton: function (event, callback) {\r\n\t\t\tvar eventName = eventNameMap[event];\r\n\t\t\tif (eventName) {\r\n\t\t\t\tdocument.addEventListener(eventName, callback, false);\r\n\t\t\t}\r\n\t\t},\r\n\t\toff: function (event, callback) {\r\n\t\t\tvar eventName = eventNameMap[event];\r\n\t\t\tif (eventName) {\r\n\t\t\t\tdocument.removeEventListener(eventName, callback, false);\r\n\t\t\t}\r\n\t\t},\r\n\t\traw: fn\r\n\t};\r\n\r\n\tif (!fn) {\r\n\t\treturn {isEnabled: false};\r\n\t} else {\r\n\t\tObject.defineProperties(screenfull, {\r\n\t\t\tisFullscreen: {\r\n\t\t\t\tget: function () {\r\n\t\t\t\t\treturn Boolean(document[fn.fullscreenElement]);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\telement: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tget: function () {\r\n\t\t\t\t\treturn document[fn.fullscreenElement];\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tisEnabled: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tget: function () {\r\n\t\t\t\t\t// Coerce to boolean in case of old WebKit\r\n\t\t\t\t\treturn Boolean(document[fn.fullscreenEnabled]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn screenfull;\r\n\t}\r\n}));\r\n\r\n/*!\r\n* leaflet.fullscreen\r\n*/\r\n(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n\t\t// define an AMD module that requires 'leaflet' and 'screenfull'\r\n\t\t// and resolve to an object containing leaflet and screenfull\r\n\t\tdefine('leafletFullScreen', ['leaflet', 'screenfull'], factory);\r\n  } else if (typeof module === 'object' && module.exports) {\r\n\t\t// define a CommonJS module that requires 'leaflet' and 'screenfull'\r\n\t\tmodule.exports = factory(require('leaflet'), require('screenfull'));\r\n  } else {\r\n\t\t// Assume 'leaflet' and 'screenfull' are loaded into global variable already\r\n\t\tfactory(root.L, root.screenfull);\r\n\t}\r\n}(this, function (leaflet, screenfull) {\r\n\t'use strict';\r\n\r\n\tleaflet.Control.FullScreen = leaflet.Control.extend({\r\n\t\toptions: {\r\n\t\t\tposition: 'topleft',\r\n\t\t\ttitle: 'Full Screen',\r\n\t\t\ttitleCancel: 'Exit Full Screen',\r\n\t\t\tforceSeparateButton: false,\r\n\t\t\tforcePseudoFullscreen: false,\r\n\t\t\tfullscreenElement: false\r\n\t\t},\r\n\r\n\t\t_screenfull: screenfull,\r\n\r\n\t\tonAdd: function (map) {\r\n\t\t\tvar className = 'leaflet-control-zoom-fullscreen', container, content = '';\r\n\r\n\t\t\tif (map.zoomControl && !this.options.forceSeparateButton) {\r\n\t\t\t\tcontainer = map.zoomControl._container;\r\n\t\t\t} else {\r\n\t\t\t\tcontainer = leaflet.DomUtil.create('div', 'leaflet-bar');\r\n\t\t\t}\r\n\r\n\t\t\tif (this.options.content) {\r\n\t\t\t\tcontent = this.options.content;\r\n\t\t\t} else {\r\n\t\t\t\tclassName += ' fullscreen-icon';\r\n\t\t\t}\r\n\r\n\t\t\tthis._createButton(this.options.title, className, content, container, this.toggleFullScreen, this);\r\n\t\t\tthis._map.fullscreenControl = this;\r\n\r\n\t\t\tthis._map.on('enterFullscreen exitFullscreen', this._toggleState, this);\r\n\r\n\t\t\treturn container;\r\n\t\t},\r\n\r\n\t\tonRemove: function () {\r\n\t\t\tleaflet.DomEvent\r\n\t\t\t\t.off(this.link, 'click', leaflet.DomEvent.stopPropagation)\r\n\t\t\t\t.off(this.link, 'click', leaflet.DomEvent.preventDefault)\r\n\t\t\t\t.off(this.link, 'click', this.toggleFullScreen, this);\r\n\r\n\t\t\tleaflet.DomEvent\r\n\t\t\t\t.off(this._container, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.stopPropagation)\r\n\t\t\t\t.off(this._container, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.preventDefault)\r\n\t\t\t\t.off(this._container, this._screenfull.raw.fullscreenchange, this._handleFullscreenChange, this);\r\n\r\n\t\t\tleaflet.DomEvent\r\n\t\t\t\t.off(document, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.stopPropagation)\r\n\t\t\t\t.off(document, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.preventDefault)\r\n\t\t\t\t.off(document, this._screenfull.raw.fullscreenchange, this._handleFullscreenChange, this);\r\n\t\t},\r\n\r\n\t\t_createButton: function (title, className, content, container, fn, context) {\r\n\t\t\tthis.link = leaflet.DomUtil.create('a', className, container);\r\n\t\t\tthis.link.href = '#';\r\n\t\t\tthis.link.title = title;\r\n\t\t\tthis.link.innerHTML = content;\r\n\r\n\t\t\tthis.link.setAttribute('role', 'button');\r\n\t\t\tthis.link.setAttribute('aria-label', title);\r\n\r\n\t\t\tleaflet.DomEvent\r\n\t\t\t\t.on(this.link, 'click', leaflet.DomEvent.stopPropagation)\r\n\t\t\t\t.on(this.link, 'click', leaflet.DomEvent.preventDefault)\r\n\t\t\t\t.on(this.link, 'click', fn, context);\r\n\r\n\t\t\tleaflet.DomEvent\r\n\t\t\t\t.on(container, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.stopPropagation)\r\n\t\t\t\t.on(container, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.preventDefault)\r\n\t\t\t\t.on(container, this._screenfull.raw.fullscreenchange, this._handleFullscreenChange, context);\r\n\r\n\t\t\tleaflet.DomEvent\r\n\t\t\t\t.on(document, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.stopPropagation)\r\n\t\t\t\t.on(document, this._screenfull.raw.fullscreenchange, leaflet.DomEvent.preventDefault)\r\n\t\t\t\t.on(document, this._screenfull.raw.fullscreenchange, this._handleFullscreenChange, context);\r\n\r\n\t\t\treturn this.link;\r\n\t\t},\r\n\r\n\t\ttoggleFullScreen: function () {\r\n\t\t\tvar map = this._map;\r\n\t\t\tmap._exitFired = false;\r\n\t\t\tif (map._isFullscreen) {\r\n\t\t\t\tif (this._screenfull.isEnabled && !this.options.forcePseudoFullscreen) {\r\n\t\t\t\t\tthis._screenfull.exit();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tleaflet.DomUtil.removeClass(this.options.fullscreenElement ? this.options.fullscreenElement : map._container, 'leaflet-pseudo-fullscreen');\r\n\t\t\t\t\tmap.invalidateSize();\r\n\t\t\t\t}\r\n\t\t\t\tmap.fire('exitFullscreen');\r\n\t\t\t\tmap._exitFired = true;\r\n\t\t\t\tmap._isFullscreen = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._screenfull.isEnabled && !this.options.forcePseudoFullscreen) {\r\n\t\t\t\t\tthis._screenfull.request(this.options.fullscreenElement ? this.options.fullscreenElement : map._container);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tleaflet.DomUtil.addClass(this.options.fullscreenElement ? this.options.fullscreenElement : map._container, 'leaflet-pseudo-fullscreen');\r\n\t\t\t\t\tmap.invalidateSize();\r\n\t\t\t\t}\r\n\t\t\t\tmap.fire('enterFullscreen');\r\n\t\t\t\tmap._isFullscreen = true;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_toggleState: function () {\r\n\t\t\tthis.link.title = this._map._isFullscreen ? this.options.title : this.options.titleCancel;\r\n\t\t\tthis._map._isFullscreen ? L.DomUtil.removeClass(this.link, 'leaflet-fullscreen-on') : L.DomUtil.addClass(this.link, 'leaflet-fullscreen-on');\r\n\t\t},\r\n\r\n\t\t_handleFullscreenChange: function () {\r\n\t\t\tvar map = this._map;\r\n\t\t\tmap.invalidateSize();\r\n\t\t\tif (!this._screenfull.isFullscreen && !map._exitFired) {\r\n\t\t\t\tmap.fire('exitFullscreen');\r\n\t\t\t\tmap._exitFired = true;\r\n\t\t\t\tmap._isFullscreen = false;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tleaflet.Map.include({\r\n\t\ttoggleFullscreen: function () {\r\n\t\t\tthis.fullscreenControl.toggleFullScreen();\r\n\t\t}\r\n\t});\r\n\r\n\tleaflet.Map.addInitHook(function () {\r\n\t\tif (this.options.fullscreenControl) {\r\n\t\t\tthis.addControl(leaflet.control.fullscreen(this.options.fullscreenControlOptions));\r\n\t\t}\r\n\t});\r\n\r\n\tleaflet.control.fullscreen = function (options) {\r\n\t\treturn new leaflet.Control.FullScreen(options);\r\n\t};\r\n\r\n\t// must return an object containing also screenfull to make screenfull\r\n\t// available outside of this package, if used as an amd module,\r\n\t// as webpack cannot handle amd define with moduleid\r\n\treturn {leaflet: leaflet, screenfull: screenfull};\r\n}));"
        }
    ]
}