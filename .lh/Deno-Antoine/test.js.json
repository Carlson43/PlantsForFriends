{
    "sourceFile": "Deno-Antoine/test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1642342792284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1642342792284,
            "name": "Commit-0",
            "content": "console.log(\"hallo\")\r\n\r\n// Start listening on port 8080 of localhost.\r\nconst server = Deno.listen({ port: 8080 });\r\nconsole.log(`HTTP webserver running.  Access it at:  http://localhost:8080/`);\r\n\r\n// Connections to the server will be yielded up as an async iterable.\r\nfor await (const conn of server) {\r\n  // In order to not be blocking, we need to handle each connection individually\r\n  // without awaiting the function\r\n  serveHttp(conn);\r\n}\r\n\r\nasync function serveHttp(conn: Deno.Conn) {\r\n  // This \"upgrades\" a network connection into an HTTP connection.\r\n  const httpConn = Deno.serveHttp(conn);\r\n  // Each request sent over the HTTP connection will be yielded as an async\r\n  // iterator from the HTTP connection.\r\n  for await (const requestEvent of httpConn) {\r\n    // The native HTTP server uses the web standard `Request` and `Response`\r\n    // objects.\r\n    const body = `Your user-agent is:\\n\\n${\r\n      requestEvent.request.headers.get(\r\n        \"user-agent\",\r\n      ) ?? \"Unknown\"\r\n    }`;\r\n    // The requestEvent's `.respondWith()` method is how we send the response\r\n    // back to the client.\r\n    requestEvent.respondWith(\r\n      new Response(body, {\r\n        status: 200,\r\n      }),\r\n    );\r\n  }\r\n}"
        }
    ]
}